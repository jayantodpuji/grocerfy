// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	requests "github.com/jayantodpuji/grocerfy/internal/requests"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *MockUserService) Register(_a0 context.Context, _a1 requests.UserRegistration) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.UserRegistration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 requests.UserRegistration
func (_e *MockUserService_Expecter) Register(_a0 interface{}, _a1 interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *MockUserService_Register_Call) Run(run func(_a0 context.Context, _a1 requests.UserRegistration)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(requests.UserRegistration))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(context.Context, requests.UserRegistration) error) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
